rotate matrix 
class Solution {
public:
    void rotate(vector<vector<int>>& mp) {
       transpose(mp);
        reverse(mp);
    }
    void transpose(vector<vector<int>>& mp){
         int n = mp.size();
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int tmp = mp[j][i];
                mp[j][i] = mp[i][j];
               mp[i][j] = tmp;
            }
        }
    }
    void reverse(vector<vector<int>>& mp){
         int n = mp.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n / 2; j++) {
                int tmp = mp[i][j];
                mp[i][j] = mp[i][n - j - 1];
                mp[i][n - j - 1] = tmp;
            }
        }
    }
};
56. Merge Intervals
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& interval) {
        vector<vector<int>> result;
       
        if(interval.size()==0)return result;
        
        sort(interval.begin(),interval.end());
        
        result.push_back(interval[0]);
        int j=0;
       
        for(int i=1;i<interval.size();i++)
        {
            
            if(result[j][1]>=interval[i][0]) result[j][1]=max(result[j][1],interval[i][1]);
           
            else
            {
                j++;
                result.push_back(interval[i]);
            }
        }
        return result;
    }
};
Merge two sorted Arrays without extra space
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int a = m - 1;
        int b = n - 1;
        int c = m + n - 1;
        
        while (a >= 0 && b >= 0) {
            if (nums1[a] > nums2[b])
                nums1[c--] = nums1[a--];
            else
                nums1[c--] = nums2[b--];
        }
        
        while (a >= 0)
            nums1[c--] = nums1[a--];
        
        while (b >= 0)
            nums1[c--] = nums2[b--];
    }
};

Find the duplicate in an array of N+1 integers.
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
           if(nums.size()>1){
        int slow=nums[0];
               int fast=nums[nums[0]];
            while(slow!=fast){
                slow=nums[slow];
                fast=nums[nums[fast]];
                 }
                  fast=0;
                          while(slow!=fast){
                              slow=nums[slow];
                              fast=nums[fast];
                          }
                   return slow;       
               }
                          return -1;
    }
};
Repeat and Missing Number
pair<int,int> missingAndRepeating(vector<int> &arr, int n)

{

// Write your code here  

   pair<int,int>ans;

   int i=0;

while(i<n){

       if(arr[i]!=arr[arr[i]-1]){

           swap(arr[i],arr[arr[i]-1]);

       }

       else

           i++;

   }

   for(int i=0;i<n;i++){

       if(arr[i]!=i+1){

          ans.first=i+1;

           ans.second=arr[i];

       }

    }

   return ans;

}
Inversion of Array (Pre-req: Merge Sort)
long long int res = 0;
void merge(long long *arr, long long l, long long m, long long r)
{
         long long n1 = m-l+1, n2 = r-m;
         long long left[n1], right[n2];
         for(long long i = 0; i < n1; i++)
            left[i] = arr[l+i];
         for(long long i = 0; i < n2; i++)
            right[i] = arr[m+i+1];
        
        int i = 0, j = 0, k = l;
        while(i < n1 && j < n2)
        {
            if(left[i] <= right[j])
                arr[k++] = left[i++];
            else
            {
                 arr[k++] = right[j++];
                 res += (n1-i);
            }
        }
        while(i < n1)
        {
            arr[k++] = left[i++];
        }
        while(j < n2)
        {
            arr[k++] = right[j++];
        }
    }
void mergeSort(long long *arr, long long l, long long r)
{
        if(l >= r)
            return;
            
            long long m = (l+r)/2;
            mergeSort(arr, l, m);
            mergeSort(arr, m+1, r);
            merge(arr, l, m, r);
}
long long getInversions(long long *arr, int n){
   
    mergeSort(arr, 0, n-1);
    return res;
}