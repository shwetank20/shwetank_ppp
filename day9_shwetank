	N meetings in one room
   int maxMeetings(int start[], int end[], int n)
    {
        // Your code here
       vector<pair<int,int>>ans;
       for(int i=0;i<n;i++){
           ans.push_back({end[i],start[i]});
       }
       sort(ans.begin(),ans.end());
       int limit=ans[0].first;
       int a=1;
       for(int i=1;i<n;i++){
           if(ans[i].second>limit){
               a++;
               limit=ans[i].first;
           }
       }
       return a;
  	Minimum number of platforms required for a railway
       int findPlatform(int arr[], int dep[], int n)
   {
   int need=1; int j=0; int max=1;
   sort(arr,arr+n);
   sort(dep,dep+n);
   for(int i=1;i<n;i++){
       if(arr[i]>dep[j]){
        j++; }
       else
       need++;
       if(need>max)
       max=need;
   }
   return max;
   }
    	Job sequencing Problem
       vector<int> JobScheduling(Job arr[], int n) 
    { 
        // your code here
        vector<pair<int,int>>v;
        for(auto i:Job){
            v.push_back({i.profit,i.dead});
        }
        sort(v.begin(),v.end());
        int sum=v[0].first;
        int c=1;
        for(int i=1;i<v.size();i++){
            if(v[i].second>v[i-1].second){
            sum+=v[i].first;
            c++;
            }
        }
            
        
        vector<int>ans;
        ans.push_back(c);
        ans.push_back(ans);
        return ans;
    } 
};
      Fractional Knapsack Problem
      double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        Arrays.sort(arr, (i1, i2) -> i2.value*i1.weight - i1.value*i2.weight);
        double res = 0.0;
        
        for(int i=0; i<n; i++){
            if(arr[i].weight <= W){
                res += arr[i].value;
                W -= arr[i].weight;
            }
            else{
                res += (double)(arr[i].value)/arr[i].weight * W;
                break;
            }
        }
        
        return res;
    }
      Greedy algorithm to find minimum number of coins
      int minCoins(int coins[], int m, int V)
{
   // base case
   if (V == 0) return 0;
 
   // Initialize result
   int res = INT_MAX;
 
   // Try every coin that has smaller value than V
   for (int i=0; i<m; i++)
   {
     if (coins[i] <= V)
     {
         int sub_res = minCoins(coins, m, V-coins[i]);
 
         // Check for INT_MAX to avoid overflow and see if
         // result can minimized
         if (sub_res != INT_MAX && sub_res + 1 < res)
            res = sub_res + 1;
     }
   }
   return res;
}
 
      
