Set Matrix Zeroes
class Solution {
public:
    void setZeroes(vector<vector<int>>& mat) {
        int m=mat.size(),n=mat[0].size(),r=1;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!mat[i][j]){
                    if(!i) r=0;
                    else mat[i][0]=0;
                    mat[0][j]=0;
                }
            }
        }
        for(int i=1;i<m;i++)
        for(int j=1;j<n;j++)
            if(mat[i][j] and (!mat[i][0] or !mat[0][j])) mat[i][j]=0;
        for(int i=m-1;i>=0;i--) if(mat[i][0] and (!mat[0][0] or (!i and !r))) mat[i][0]=0;
        for(int i=n-1;i>=0;i--) if(mat[0][i] and !r) mat[0][i]=0;
    }
};

Pascal’s Triangle
class Solution {
public:
    vector<vector<int>> generate(int n) { 
        vector<vector<int>> ans;
        for(int i = 0;i<n;i++)
        {
            vector<int> tp(i+1,1); 
            for(int j = 1;j<i;j++)
            {
                tp[j] = ans[i-1][j] + ans[i-1][j-1];
            }
           ans.push_back(tp);  
        }
        return ans; 
    }
};
next permutation 
class Solution {
public:
   void nextPermutation(vector<int> &nums)
{
    // initialize variable:
    int breakPoint = -1;

    // find a breakpoint:
    for (int i = nums.size() - 1; i > 0; i--)
    {
        if (nums[i] > nums[i - 1])
        {
            breakPoint = i - 1;
            break;
        }
    }

    // if no breakpoint
    if (breakPoint < 0)
    {
        reverse(nums.begin(), nums.end());
        return;
    }

    // if found a breakpoint
    for (int i = nums.size() - 1; i >= 0; i--)
    {
        if (nums[i] > nums[breakPoint])
        {
            swap(nums[breakPoint], nums[i]);
            reverse(nums.begin() + breakPoint + 1, nums.end());
            break;
        }
    }
}
};
Kadane’s Algorithm
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int k=INT_MIN,sum=0;
        if(nums.size()==1){
                return nums[sum];
            }
        for(int i=0;i<nums.size();i++){
              sum+=nums[i];
         k=max(sum,k);
             if(sum<0){
                sum=0;
           }
        
         
        }
        return k;
    }
};
Sort an array of 0’s 1’s 2’s
class Solution {
public:
void sortColors(vector<int>& nums) {
    int l=0, mid=0, h=nums.size() - 1;
    while (mid <= h)
        if (nums[mid] == 0)
            swap(nums[mid++], nums[l++]);
        else if (nums[mid] == 1)
            mid++;
        else 
            swap(nums[mid], nums[h--]);
}
};

Stock buy and Sell
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int ans=0;
        int maxi=0;
        for(int i=n-1;i>=0;i--){
            maxi=max(prices[i],maxi);
            ans=max(ans,maxi-prices[i]);
        }
        return ans;
    }
};